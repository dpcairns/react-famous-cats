{"version":3,"sources":["common/Header.js","cat-list/CatItem.js","cat-list/CatList.js","services/cat-api.js","cat-list/CatListApp.js","App.js","serviceWorker.js","index.js"],"names":["Header","title","this","props","class","src","alt","href","Component","CatItem","cat","name","type","url","year","CatList","cats","map","URL","a","fetch","response","json","data","CatListApp","state","getCats","then","console","log","setState","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oWAwBeA,E,iLApBX,IAAMC,EAAQC,KAAKC,MAAMF,OAAS,cAElC,OACE,gCACE,yBACEG,MAAM,OACNC,IAAI,0BACJC,IAAI,0BAEN,4BAAKL,GACL,6BACE,uBAAGM,KAAK,MAAR,QACA,uBAAGA,KAAK,mBAAR,QACA,uBAAGA,KAAK,mBAAR,mB,GAfWC,aCsBNC,G,uLApBH,IACAC,EAAQR,KAAKC,MAAbO,IAER,OACE,wBAAIN,MAAM,YACR,yBAAKA,MAAM,kBAAX,kBAEE,4BAAKM,EAAIC,MACT,uBAAGP,MAAM,YAAYM,EAAIE,OAG3B,yBAAKR,MAAM,mBACT,yBAAKC,IAAKK,EAAIG,IAAKP,IAAKI,EAAIC,QAE9B,uBAAGP,MAAM,QAAQM,EAAII,W,GAfPN,cCWPO,G,uLARX,OACE,wBAAIX,MAAM,QACPF,KAAKC,MAAMa,MAAQd,KAAKC,MAAMa,KAAKC,KAAI,SAAAP,GAAG,OAAI,kBAAC,EAAD,CAASA,IAAKA,Y,GAJ/CF,c,uBCJhBU,EAAG,8C,4CAEF,gCAAAC,EAAA,6DACCN,EADD,UACUK,EADV,kBAGkBE,MAAMP,GAHxB,cAGCQ,EAHD,gBAIcA,EAASC,OAJvB,cAICC,EAJD,yBAKEA,GALF,4C,gCC2BQC,E,2MAtBbC,MAAQ,CAAET,KAAM,I,mFAEK,IAAD,QDPf,WAAP,gCCQIU,GAAUC,MAAK,SAAAX,GACbY,QAAQC,IAAIb,GAEZ,EAAKc,SAAS,CAAEd,c,+BAKlB,OACE,6BACE,kBAAC,EAAD,CAAQf,MAAM,iBACd,8BACE,kBAAC,EAAD,CAASe,KAAMd,KAAKuB,MAAMT,a,GAhBXR,aCMVuB,MARf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjB,MAAK,SAAAkB,GACjCA,EAAaC,kB","file":"static/js/main.012de36d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Header extends Component {\n  render() {\n    const title = this.props.title || \"Famous Cats\";\n\n    return (\n      <header>\n        <img\n          class=\"logo\"\n          src=\"assets/alchemy-logo.png\"\n          alt=\"Alchemy Code Lab Logo\"\n        />\n        <h1>{title}</h1>\n        <nav>\n          <a href=\"./\">Home</a>\n          <a href=\"./cat-list.html\">Cats</a>\n          <a href=\"./cat-form.html\">Add a Cat</a>\n        </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport \"./CatItem.css\";\n\nclass CatItem extends Component {\n  render() {\n    const { cat } = this.props;\n\n    return (\n      <li class=\"cat-item\">\n        <div class=\"info-container\">\n            CAAAAAATTTT!!!!\n          <h2>{cat.name}</h2>\n          <p class=\"cat-type\">{cat.type}</p>\n        </div>\n\n        <div class=\"image-container\">\n          <img src={cat.url} alt={cat.name} />\n        </div>\n        <p class=\"year\">{cat.year}</p>\n      </li>\n    );\n  }\n}\n\nexport default CatItem;\n","import React, { Component } from \"react\";\nimport CatItem from \"./CatItem.js\";\nimport \"./CatList.css\";\n\nclass CatList extends Component {\n  render() {\n    return (\n      <ul class=\"cats\">\n        {this.props.cats && this.props.cats.map(cat => <CatItem cat={cat} />)}\n      </ul>\n    );\n  }\n}\n\nexport default CatList;\n","const URL = `https://new-cats-db-danny.herokuapp.com/api`;\n\nexport async function getCats() {\n  const url = `${URL}/cats`;\n\n  const response = await fetch(url);\n  const data = await response.json();\n  return data;\n}\n","import React, { Component } from \"react\";\nimport Header from \"../common/Header.js\";\nimport CatList from \"./CatList.js\";\nimport { getCats } from \"../services/cat-api.js\";\nimport \"./CatListApp.css\";\n\nclass CatListApp extends Component {\n  state = { cats: [] };\n\n  componentDidMount() {\n    getCats().then(cats => {\n      console.log(cats);\n\n      this.setState({ cats });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Header title=\"List of Cats\" />\n        <main>\n          <CatList cats={this.state.cats} />\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default CatListApp;\n","import React from \"react\";\nimport \"./App.css\";\nimport CatList from \"./cat-list/CatListApp\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CatList />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}